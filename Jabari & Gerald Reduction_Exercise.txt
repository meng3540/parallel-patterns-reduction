#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define N 512

__global__ void Reduction(float* A, float* B)
{
	extern __shared__ float sharedMem[];

	unsigned int t = threadIdx.x;
	unsigned int start = blockIdx.x * blockDim.x * 2;
	unsigned int i = start + t;

	sharedMem[t] = A[i];
	if (i + blockDim.x < N)
		sharedMem[t] += A[i + blockDim.x];

	for (unsigned int stride = blockDim.x >> 1; stride > 0; stride >>= 1) {
		__syncthreads();
		if (t < stride) {
			sharedMem[t] += sharedMem[t + stride];
		}
	}

	if (t == 0) {
		B[blockIdx.x] = sharedMem[0];
	}
}

int main(int argc, char** argv)
{
	float* hostA;
	float* hostB;
	float* deviceA;
	float* deviceB;
	int Asize, Bsize;

	Asize = N * sizeof(float);
	hostA = (float*)malloc(Asize);

	Bsize = sizeof(float); // Size for one result
	hostB = (float*)malloc(Bsize);

	for (int i = 0; i < N; i++) {
		hostA[i] = i + 1;
	}

	cudaMalloc((void**)&deviceA, Asize);
	cudaMalloc((void**)&deviceB, Bsize);

	cudaMemcpy(deviceA, hostA, Asize, cudaMemcpyHostToDevice);

	dim3 blockDim(256); //i had issues with the shared memory so i divided it into 2
	dim3 gridDim((N + blockDim.x - 1) / blockDim.x); // Adjusted grid dimension calculation

	Reduction << <gridDim, blockDim, blockDim.x * sizeof(float) >> > (deviceA, deviceB); // Shared memory size adjusted
	cudaDeviceSynchronize();

	cudaMemcpy(hostB, deviceB, Bsize, cudaMemcpyDeviceToHost);

	printf("\n\nVector A:\n");
	for (int i = 0; i < N; i++) {
		printf("%.0f ", hostA[i]);
	}

	printf("\n\nVector Sum:\n");
	printf("%.0f\n", hostB[0]);

	cudaFree(deviceA);
	cudaFree(deviceB);

	free(hostA);
	free(hostB);
	return 0;
}